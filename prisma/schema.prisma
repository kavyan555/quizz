// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?

  username String? @unique

  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  marketplaceItems MarketplaceItem[]
    quizes             Quizes[]  
}

model Conversation {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
  createdAt   DateTime     @default(now())
}

model Message {
  id             String           @id @default(uuid())
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         String
  content        String
  createdAt      DateTime      @default(now())
}

model MarketplaceItem {
  id                   String    @id @default(cuid())
  itemName             String
  description         String?
  estimatedWeightKg    Float     // Estimated Product Weight in kg
  priceRangePerKg      String    // Estimated Price Range per kg
  contactLink          String    // Phone/WhatsApp Link
  estimatedAvailability DateTime // Estimated Availability Date
  status               Boolean   // Toggle for Available (true) or Unavailable (false)
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime  @default(now())
}

model Quizes {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameType   String   // e.g., "quiz", "puzzle", etc.
  attempted  Int
  score      Int
  percentage Float?   // e.g., score/attempted * 100
  createdAt  DateTime @default(now())
}